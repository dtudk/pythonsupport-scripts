{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Support Scripts (macOS) \u00b6 Minimal documentation for the macOS installation scripts and GUI. macOS components: see Components Orchestration and GUI: see Orchestration Install options \u00b6 GUI: run the app in MacOS/GUI/ (dummy available; real installer in progress) CLI: one-liner main script /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS_AutoInstall.sh)\" Or locally (no curl): bash ./MacOS/install_all.sh Develop the docs locally \u00b6 Install: pip install mkdocs Serve: cd docs && mkdocs serve or use VS Code task \"Docs: Serve\" Build: cd docs && mkdocs build (outputs to site/ )","title":"Home"},{"location":"#python-support-scripts-macos","text":"Minimal documentation for the macOS installation scripts and GUI. macOS components: see Components Orchestration and GUI: see Orchestration","title":"Python Support Scripts (macOS)"},{"location":"#install-options","text":"GUI: run the app in MacOS/GUI/ (dummy available; real installer in progress) CLI: one-liner main script /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS_AutoInstall.sh)\" Or locally (no curl): bash ./MacOS/install_all.sh","title":"Install options"},{"location":"#develop-the-docs-locally","text":"Install: pip install mkdocs Serve: cd docs && mkdocs serve or use VS Code task \"Docs: Serve\" Build: cd docs && mkdocs build (outputs to site/ )","title":"Develop the docs locally"},{"location":"ci/","text":"GitHub Actions Integration \u00b6 CI ideas for validating installers and building docs. Docs build \u00b6 Build MkDocs site on PR to ensure docs render. Script checks (future) \u00b6 Lint shell scripts (e.g., shellcheck ). Run smoke tests in macOS runner (limited) or in containerized environments where possible. Verify the one-liner download URL responds and returns exit code 0.","title":"GitHub CI"},{"location":"ci/#github-actions-integration","text":"CI ideas for validating installers and building docs.","title":"GitHub Actions Integration"},{"location":"ci/#docs-build","text":"Build MkDocs site on PR to ensure docs render.","title":"Docs build"},{"location":"ci/#script-checks-future","text":"Lint shell scripts (e.g., shellcheck ). Run smoke tests in macOS runner (limited) or in containerized environments where possible. Verify the one-liner download URL responds and returns exit code 0.","title":"Script checks (future)"},{"location":"macos/components/","text":"macOS Installation Scripts \u2014 Components \u00b6 Minimal overview of script components used for the macOS installer, with split recommendations for a GUI-friendly architecture. Components \u00b6 Homebrew ( MacOS/Homebrew/Install.sh ) \u00b6 Split recommendation: Optional Why: Script is focused already; GUI needs reliable PATH setup. Suggested split: Homebrew/ensure_installed.sh : Only install if missing; return early if present. Homebrew/shellenv.sh : Apply brew shellenv to current shell; safe for non-login shells. Python ( MacOS/Python/Install.sh ) \u00b6 Split recommendation: Yes Why: Combines brew check, Miniconda install, conda init, channel config, Python pin, and packages. Suggested split: Python/ensure_homebrew.sh : Guard that ensures Homebrew is present (reuses Homebrew step). Python/install_miniconda.sh : Install Miniconda if missing. Python/init_conda.sh : conda init for bash/zsh; source profiles in non-login shells. Python/configure_conda_channels.sh : Remove defaults , add conda-forge , set priority. Python/ensure_python_version.sh : Pin Python version with libmamba fallback. Python/install_base_packages.sh : Install required packages. Python/Install.sh : Orchestrator that calls the above. Visual Studio Code ( MacOS/VSC/Install.sh ) \u00b6 Split recommendation: Yes Why: Install vs configuration (extensions) should be separable; improves retries and visibility. Suggested split: VSC/ensure_installed.sh : Install VS Code if not present (replace ad\u2011hoc multi-version detector). VSC/verify_cli.sh : Ensure code CLI is on PATH (eval brew shellenv first). VSC/extensions.txt : Plain list of extensions to install. VSC/install_extensions.sh : Install from extensions.txt . VSC/Install.sh : Orchestrator that calls the above. LaTeX ( MacOS/Latex/Install.sh ) \u00b6 Split recommendation: Yes Why: Current script is long and interactive; GUI requires non-interactive steps and clearer progress. Suggested split: Latex/install_pandoc.sh : Arch-aware .pkg install. Latex/ensure_basictex.sh : Install BasicTeX if missing. Latex/install_tex_packages.sh : tlmgr self-update and package installs with retries. Latex/update_nbconvert.sh : Use python3 -m pip install --force-reinstall nbconvert reliably. Make all steps non-interactive (no read prompts); exit with codes only. Shared utilities \u00b6 Split recommendation: Yes Why: Consistent behavior across all components; easier GUI integration. Suggested additions: MacOS/lib/common.sh : log , warn , die , with_brew_env , is_command , require_admin ; set set -euo pipefail . Notes \u00b6 Scripts should be non-interactive; confirmations handled by GUI. Do not launch browsers on error; return non\u2011zero exit codes and let GUI show an error. Prefer zsh on modern macOS; ensure PATH updates via brew shellenv when running from AppleScript.","title":"Components"},{"location":"macos/components/#macos-installation-scripts-components","text":"Minimal overview of script components used for the macOS installer, with split recommendations for a GUI-friendly architecture.","title":"macOS Installation Scripts \u2014 Components"},{"location":"macos/components/#components","text":"","title":"Components"},{"location":"macos/components/#homebrew-macoshomebrewinstallsh","text":"Split recommendation: Optional Why: Script is focused already; GUI needs reliable PATH setup. Suggested split: Homebrew/ensure_installed.sh : Only install if missing; return early if present. Homebrew/shellenv.sh : Apply brew shellenv to current shell; safe for non-login shells.","title":"Homebrew (MacOS/Homebrew/Install.sh)"},{"location":"macos/components/#python-macospythoninstallsh","text":"Split recommendation: Yes Why: Combines brew check, Miniconda install, conda init, channel config, Python pin, and packages. Suggested split: Python/ensure_homebrew.sh : Guard that ensures Homebrew is present (reuses Homebrew step). Python/install_miniconda.sh : Install Miniconda if missing. Python/init_conda.sh : conda init for bash/zsh; source profiles in non-login shells. Python/configure_conda_channels.sh : Remove defaults , add conda-forge , set priority. Python/ensure_python_version.sh : Pin Python version with libmamba fallback. Python/install_base_packages.sh : Install required packages. Python/Install.sh : Orchestrator that calls the above.","title":"Python (MacOS/Python/Install.sh)"},{"location":"macos/components/#visual-studio-code-macosvscinstallsh","text":"Split recommendation: Yes Why: Install vs configuration (extensions) should be separable; improves retries and visibility. Suggested split: VSC/ensure_installed.sh : Install VS Code if not present (replace ad\u2011hoc multi-version detector). VSC/verify_cli.sh : Ensure code CLI is on PATH (eval brew shellenv first). VSC/extensions.txt : Plain list of extensions to install. VSC/install_extensions.sh : Install from extensions.txt . VSC/Install.sh : Orchestrator that calls the above.","title":"Visual Studio Code (MacOS/VSC/Install.sh)"},{"location":"macos/components/#latex-macoslatexinstallsh","text":"Split recommendation: Yes Why: Current script is long and interactive; GUI requires non-interactive steps and clearer progress. Suggested split: Latex/install_pandoc.sh : Arch-aware .pkg install. Latex/ensure_basictex.sh : Install BasicTeX if missing. Latex/install_tex_packages.sh : tlmgr self-update and package installs with retries. Latex/update_nbconvert.sh : Use python3 -m pip install --force-reinstall nbconvert reliably. Make all steps non-interactive (no read prompts); exit with codes only.","title":"LaTeX (MacOS/Latex/Install.sh)"},{"location":"macos/components/#shared-utilities","text":"Split recommendation: Yes Why: Consistent behavior across all components; easier GUI integration. Suggested additions: MacOS/lib/common.sh : log , warn , die , with_brew_env , is_command , require_admin ; set set -euo pipefail .","title":"Shared utilities"},{"location":"macos/components/#notes","text":"Scripts should be non-interactive; confirmations handled by GUI. Do not launch browsers on error; return non\u2011zero exit codes and let GUI show an error. Prefer zsh on modern macOS; ensure PATH updates via brew shellenv when running from AppleScript.","title":"Notes"},{"location":"macos/orchestration/","text":"macOS Installation \u2014 Orchestration and GUI \u00b6 Ways to run the installer on macOS. CLI (one-liner) \u00b6 /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS_AutoInstall.sh)\" Local orchestrator (no curl) \u00b6 bash ./MacOS/install_all.sh GUI \u00b6 Prototype GUI is available under MacOS/GUI/ . The GUI calls the local orchestrator and/or component scripts. Current status: dummy GUI simulates steps without executing scripts.","title":"Orchestration and GUI"},{"location":"macos/orchestration/#macos-installation-orchestration-and-gui","text":"Ways to run the installer on macOS.","title":"macOS Installation \u2014 Orchestration and GUI"},{"location":"macos/orchestration/#cli-one-liner","text":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/dtudk/pythonsupport-scripts/main/MacOS_AutoInstall.sh)\"","title":"CLI (one-liner)"},{"location":"macos/orchestration/#local-orchestrator-no-curl","text":"bash ./MacOS/install_all.sh","title":"Local orchestrator (no curl)"},{"location":"macos/orchestration/#gui","text":"Prototype GUI is available under MacOS/GUI/ . The GUI calls the local orchestrator and/or component scripts. Current status: dummy GUI simulates steps without executing scripts.","title":"GUI"},{"location":"windows/","text":"Windows \u00b6 Windows documentation placeholder. Installation scripts \u2014 Components: (coming soon) Orchestration and GUI: (coming soon) GitHub Actions integration: (coming soon)","title":"Components"},{"location":"windows/#windows","text":"Windows documentation placeholder. Installation scripts \u2014 Components: (coming soon) Orchestration and GUI: (coming soon) GitHub Actions integration: (coming soon)","title":"Windows"}]}